[  
    {  
       "name":"TEnvironment",
       "implemented_by":["Environment"],
       "doc":"is a read only environment",
       "methods":[  
            {"name":"Name","attribute":"Name", "doc":"returns the name of the environment"},
            {"name":"Qualifier","attribute":"Qualifier", "doc":"returns the qualifier of the environment"},
            {"name":"Description","attribute":"Description", "doc":"returns the description of the environment"},
            {"name":"QualifiedName", "custom":{"returns":"string", "impl":"r.h.Name + \"_\" + r.h.Qualifier"}, "doc":"returns the qualified of the environment"},
            {"name":"Platform", "interface":{"name":"TPlatform", "attribute":"ekara", "type":"Platform"}, "no_pointer":1, "doc":"returns the platform used to deploy environment"},
            {"name":"HasVars", "custom": {"returns":"bool", "impl":"len(r.h.Vars) > 0"}, "doc":"returns true if the environment has defined vars"},
            {"name":"Vars", "custom": {"returns":"map[string]interface{}", "impl":"r.h.Vars"}, "doc":"returns the environement vars"},
            {"name":"Orchestrator", "interface":{"name":"TOrchestrator", "attribute":"Orchestrator" }, "doc":"returns the orchestrator managing the environment nodes"},
            {"name":"HasProviders", "custom": {"returns":"bool", "impl":"len(r.h.Providers) > 0"}, "doc":"returns true if the environment has providers"},
            {"name":"Providers", "interface_map":{"name":"TProvider", "attribute":"Providers", "type":"Provider" }, "doc":"returns the environment providers"},

            {"name":"HasNodes", "custom": {"returns":"bool", "impl":"len(r.h.NodeSets) > 0"}, "doc":"returns true if the environment has nodes"},
            {"name":"Nodes", "interface_map":{"name":"TNodeSet", "attribute":"NodeSets", "type":"NodeSet" }, "doc":"returns the environment providers"},
            {"name":"HasStacks", "custom": {"returns":"bool", "impl":"len(r.h.Stacks) > 0"}, "doc":"returns true if the environment has stacks"},
            {"name":"Stacks", "interface_map":{"name":"TStack", "attribute":"Stacks", "type":"Stack" }, "doc":"returns the environment stacks"},
            {"name":"HasTasks", "custom": {"returns":"bool", "impl":"len(r.h.Tasks) > 0"}, "doc":"returns true if the environment has tasks"},
            {"name":"Tasks", "interface_map":{"name":"TTask", "attribute":"Tasks", "type":"Task" }, "no_pointer":1, "doc":"returns the environment tasks"},

            {"name":"HasHooks", "custom": {"returns":"bool", "impl":"r.h.Hooks.HasTasks()"}, "doc":"returns true if the environment has hooks"},
            {"name":"Hooks", "interface":{"name":"TEnvironmentHooks", "attribute":"Hooks", "type":"EnvironmentHooks"}, "doc":"returns the environment hooks"},
            {"name":"HasInitHooks",  "custom": {"returns":"bool", "impl":"r.h.Hooks.Init.HasTasks()"}, "doc":"returns true if the environment has hooks before creating"},
            {"name":"HasCreateHooks",  "custom": {"returns":"bool", "impl":"r.h.Hooks.Create.HasTasks()"}, "doc":"returns true if the environment has hooks while creating"},
            {"name":"HasInstallHooks",  "custom": {"returns":"bool", "impl":"r.h.Hooks.Install.HasTasks()"}, "doc":"returns true if the environment has hooks while installing"},
            {"name":"HasDeployHooks",  "custom": {"returns":"bool", "impl":"r.h.Hooks.Deploy.HasTasks()"}, "doc":"returns true if the environment has hooks while deploying"},
            {"name":"HasDestroyHooks",  "custom": {"returns":"bool", "impl":"r.h.Hooks.Destroy.HasTasks()"}, "doc":"returns true if the environment has hooks while destroying"}
        ]
    },
    {  
        "name":"TOrchestrator",
        "implemented_by":["Orchestrator"],
        "doc":"is a read only orchestrator",
        "methods":[  
            {"name":"Parameters", "returns":"map[string]interface{}", "attribute":"Parameters" , "doc":"returns the orchestrator parameters"},
            {"name":"EnvVars",  "returns":"map[string]string", "attribute":"EnvVars", "doc":"returns the orchestrator environment variables"},
            {"name":"Component", "component":{"attribute":"", "type":"Component"}, "doc":"returns the orchestrator component"}
        ]
    },
    {
        "name":"TProvider",
        "implemented_by":["Provider"],
        "doc":"is a read only provider",
        "methods":[  
            {"name":"Name","attribute":"Name", "doc":"returns the name of the provider"},
            {"name":"Parameters", "returns":"map[string]interface{}", "attribute":"Parameters" , "doc":"returns the provider parameters"},
            {"name":"EnvVars",  "returns":"map[string]string", "attribute":"EnvVars", "doc":"returns the provider environment variables"},
            {"name":"Proxy", "interface":{"name":"TProxy", "attribute":"Proxy" }, "doc":"returns the proxy definition applied to the provider"},
            {"name":"Component", "component":{"attribute":"", "type":"Component"}, "doc":"returns the provider component"}
        ]
    },
    {  
        "name":"TProviderRef",
        "implemented_by":["ProviderRef"],
        "doc":"is a read only reference on a provider",
        "methods":[  
            {"name":"Provider", "resolve":{"name":"TProvider", "attribute":"", "type":"Provider"}, "doc":"returns the provider wherein the node should be deployed"}
        ]
    },
    {  
        "name":"TNodeSet",
        "implemented_by":["NodeSet"],
        "doc":"is a read only node set",
        "methods":[  
            {"name":"Name","attribute":"Name", "doc":"returns the name of the node set"},
            {"name":"Instances","returns":"int","attribute":"Instances", "doc":"returns the number of nodes to create for this node set"},
            {"name":"Provider", "interface":{"name":"TProviderRef", "attribute":"Provider", "type":"ProviderRef"}, "doc":"returns the reference on the provider wherein the node should be deployed"},
            {"name":"HasHooks", "custom": {"returns":"bool", "impl":"r.h.Hooks.HasTasks()"}, "doc":"returns true if the node has hooks"},
            {"name":"Hooks", "interface":{"name":"TNodeHook", "attribute":"Hooks", "type":"NodeHook"}, "doc":"returns the node hooks"},
            {"name":"HasCreateHooks",  "custom": {"returns":"bool", "impl":"r.h.Hooks.Create.HasTasks()"}, "doc":"returns true if the node has hooks while creating"},
            {"name":"HasLabels", "custom": {"returns":"bool", "impl":"len(r.h.Labels) > 0"}, "doc":"returns true if the node has defined labels"},
            {"name":"Labels",  "returns":"map[string]string", "attribute":"Labels", "doc":"returns the node labels"}
        ]
    },
    {  
        "name":"TStack",
        "implemented_by":["Stack"],
        "doc":"is a read only stack",
        "methods":[  
            {"name":"Name","attribute":"Name", "doc":"returns the name of the stack"},
            {"name":"Playbook","attribute":"Playbook", "doc":"returns the custom deployment playbook of the stack if any"},
            {"name":"Parameters", "returns":"map[string]interface{}", "attribute":"Parameters" , "doc":"returns the stack parameters"},
            {"name":"EnvVars",  "returns":"map[string]string", "attribute":"EnvVars", "doc":"returns the stack environment variables"},
            {"name":"HasHooks", "custom": {"returns":"bool", "impl":"r.h.Hooks.HasTasks()"}, "doc":"returns true if the stack has hooks"},
            {"name":"Hooks", "interface":{"name":"TStackHooks", "attribute":"Hooks", "type":"StackHook"}, "doc":"returns the stack hooks"},
            {"name":"HasDeployHooks",  "custom": {"returns":"bool", "impl":"r.h.Hooks.Deploy.HasTasks()"}, "doc":"returns true if the stack has hooks while deploying"},
            {"name":"Dependencies", "interface":{"name":"TDependencies", "attribute":"DependsOn", "type":"Dependencies"}, "doc":"returns the stack dependencies"},
            {"name":"HasCopies", "custom": {"returns":"bool", "impl":"len(r.h.Copies.Content) > 0"}, "doc":"returns true if the stacks has copies"},
            {"name":"Copies", "interface_map":{"name":"TCopy", "attribute":"Copies.Content", "type":"Copy" }, "doc":"returns the stack copies"}
        ]
    },
    {  
        "name":"TStackRef",
        "implemented_by":["StackRef"],
        "doc":"is a read only reference on a stack",
        "methods":[  
            {"name":"Stack", "resolve":{"name":"TStack", "attribute":"", "type":"Stack"}, "doc":"returns the stack corresponding to the ref"}
        ]
    },
    {  
        "name":"TDependencies",
        "implemented_by":["Dependencies"],
        "doc":"is a read only list of stack dependencies",
        "methods":[  
            {"name":"HasDependencies", "custom": {"returns":"bool", "impl":"len(r.h.Content) > 0"}, "doc":"returns true if there is dependencies"},
            {"name":"Dependencies", "interface_array":{"name":"TStackRef", "attribute":"Content", "type":"StackRef" }, "doc":"returns the references of stacks we depend on"}
        ]
    },
    {  
        "name":"TCopy",
        "implemented_by":["Copy"],
        "doc":"is a read only representation of files to be copied",
        "methods":[  
            {"name":"HasLabels", "custom": {"returns":"bool", "impl":"len(r.h.Labels) > 0"}, "doc":"returns true if the copy has defined labels"},
            {"name":"Labels",  "returns":"map[string]string", "attribute":"Labels", "doc":"returns the copy labels"},
            {"name":"HasSources", "custom": {"returns":"bool", "impl":"len(r.h.Sources) > 0"}, "doc":"returns true if the copy has defined sources"},
            {"name":"Sources",  "returns":"[]string", "attribute":"Sources", "doc":"returns the copy sources"}
        ]
    },
    {  
        "name":"TTask",
        "implemented_by":["Task"],
        "doc":"is a read only task",
        "methods":[  
            {"name":"Name","attribute":"Name", "doc":"returns the name of the task"},
            {"name":"Playbook","attribute":"Playbook", "doc":"returns the playbook linked to the task"},
            {"name":"Parameters", "returns":"map[string]interface{}", "attribute":"Parameters" , "doc":"returns the task parameters"},
            {"name":"EnvVars",  "returns":"map[string]string", "attribute":"EnvVars", "doc":"returns the task environment variables"},
            {"name":"HasHooks", "custom": {"returns":"bool", "impl":"r.h.Hooks.HasTasks()"}, "doc":"returns true if the task has hooks"},
            {"name":"Hooks", "interface":{"name":"TTaskHooks", "attribute":"Hooks", "type":"TaskHook"}, "doc":"returns the task hooks"}
        ]
    },
    {  
        "name":"TTaskRef",
        "implemented_by":["TaskRef"],
        "doc":"is a read only reference on a task",
        "methods":[  
            {"name":"Task", "resolve":{"name":"TTask", "attribute":"", "type":"Task"}, "doc":"returns the task corresponding to the ref"}
        ]
    },
    {  
        "name":"TPlatform",
        "implemented_by":["Platform"],
        "doc":"is a read only platform",
        "methods":[  
            {"name":"Base", "interface":{"name":"TBase", "attribute":"Base" }, "doc":"returns the base location of the platform"},
            {"name":"Parent", "interface":{"name":"TComponent", "attribute":"Parent"}, "doc":"returns the parent used by the platform"},
            {"name":"HasComponents",  "custom": {"returns":"bool", "impl":"len(r.h.Components) > 0"}, "doc":"returns true if the platform has components"},
            {"name":"HasTemplates", "custom": {"returns":"bool", "impl":"len(r.h.Templates) > 0"}, "doc":"returns true if the environment has defined templates"},
            {"name":"Templates", "custom": {"returns":"[]string", "impl":"r.h.Templates"}, "doc":"returns the environment templates"}
        ]
    },
    {  
        "name":"TBase",
        "implemented_by":["Base"],
        "doc":"is a read only base location",
        "methods":[  
            {"name":"URL", "interface":{"name":"TURL", "attribute":"Url","type":"EkURL"}, "doc":"returns the url where the base refers"}
        ]
    },
    {  
        "name":"TURL",
        "implemented_by":["EkURL"],
        "doc":"is a read only ekara url",
        "methods":[  
            {"name":"String",  "custom": {"impl":"r.h.String()"}, "doc":"returns the string representation of the whole url"},
            {"name":"Scheme",  "custom": {"impl":"r.h.Scheme()"}, "doc":"returns the url scheme"},
            {"name":"Path",  "custom": {"impl":"r.h.Path()"}, "doc":"returns the url path"},
            {"name":"AsFilePath",  "custom": {"impl":"r.h.AsFilePath()"}, "doc":"returns the path converted as a file path"},
            {"name":"Host",  "custom": {"impl":"r.h.Host()"}, "doc":"returns the url host"}
        ]
    },
    {  
        "name":"TProxy",
        "implemented_by":["Proxy"],
        "doc":"is a read only proxy configuration",
        "methods":[  
            {"name":"HTTP", "attribute":"Http", "doc":"returns the proxy http definition"},
            {"name":"HTTPS", "attribute":"Https", "doc":"returns the proxy https definition"},
            {"name":"NoProxy", "attribute":"NoProxy", "doc":"returns the no proxy definition"}
        ]
    },
    {  
        "name":"TComponent",
        "implemented_by":["Parent", "Component"],
        "doc":"is a read only component",
        "methods":[  
            {"name":"ID","attribute":"Id", "doc":"returns the name of the component"},
            {"name":"Repository", "interface":{"name":"TRepository", "attribute":"Repository"}, "doc":"returns the repository where the component is located"},
            {"name":"HasTemplates",  "custom": {"returns":"bool", "impl":"len(r.h.Templates) > 0"}, "doc":"returns true if the component has defined templates"},
            {"name":"Templates", "custom": {"returns":"[]string", "impl":"r.h.Templates"}, "doc":"returns true if the component templates"}
        ]
    },
    {  
        "name":"TRepository",
        "implemented_by":["Repository"],
        "doc":"is a read only repository",
        "methods":[  
            {"name":"Scm","custom":{"impl":"string(r.h.Scm)"}, "doc":"returns the type of the source control management holding the repository"},
            {"name":"URL", "interface":{"name":"TURL", "attribute":"Url","type":"EkURL"}, "doc":"returns the url where the repository is located"},
            {"name":"Ref", "attribute":"Ref", "doc":"returns the reference (tag,branch, ...) to use within the repository"},
            {"name":"DescriptorName", "attribute":"DescriptorName", "doc":"returns the name of the ekara descriptor for this repository"}
        ]
    },
    {  
        "name":"TEnvironmentHooks",
        "implemented_by":["EnvironmentHooks"],
        "doc":"is a read only representation of the hooks associated to an environment",
        "methods":[  
            {"name":"HasInit",  "custom": {"returns":"bool", "impl":"r.h.Init.HasTasks()"}, "doc":"returns true if the hooks has tasks while before creating"},
            {"name":"Init", "interface":{"name":"THook", "attribute":"Init", "type":"Hook"}, "doc":"returns the initialization tasks"},
            {"name":"HasCreate",  "custom": {"returns":"bool", "impl":"r.h.Create.HasTasks()"}, "doc":"returns true if the hooks has tasks while creating"},
            {"name":"Create", "interface":{"name":"THook", "attribute":"Create", "type":"Hook"}, "doc":"returns the creating tasks"},
            {"name":"HasInstall",  "custom": {"returns":"bool", "impl":"r.h.Install.HasTasks()"}, "doc":"returns true if the hooks has tasks while installing"},
            {"name":"Install", "interface":{"name":"THook", "attribute":"Install", "type":"Hook"}, "doc":"returns the installing tasks"},
            {"name":"HasDeploy",  "custom": {"returns":"bool", "impl":"r.h.Deploy.HasTasks()"}, "doc":"returns true if the hooks has tasks while deploying"},
            {"name":"Deploy", "interface":{"name":"THook", "attribute":"Deploy" , "type":"Hook"}, "doc":"returns the deploying tasks"},
            {"name":"HasDestroy",  "custom": {"returns":"bool", "impl":"r.h.Destroy.HasTasks()"}, "doc":"returns true if the hooks has tasks while destroying"},
            {"name":"Destroy", "interface":{"name":"THook", "attribute":"Destroy" , "type":"Hook"}, "doc":"returns the destruction tasks"}
        ]
    },
    {  
        "name":"TStackHooks",
        "implemented_by":["StackHook"],
        "doc":"is a read only representation of the hooks associated to a stack",
        "methods":[  
            {"name":"HasDeploy",  "custom": {"returns":"bool", "impl":"r.h.Deploy.HasTasks()"}, "doc":"returns true if the hooks has tasks while deploying"},
            {"name":"Deploy", "interface":{"name":"THook", "attribute":"Deploy" , "type":"Hook"}, "doc":"returns the deploying tasks"}
        ]
    },
    {  
        "name":"TTaskHooks",
        "implemented_by":["TaskHook"],
        "doc":"is a read only representation of the hooks associated to a task",
        "methods":[  
            {"name":"HasExecute",  "custom": {"returns":"bool", "impl":"r.h.Execute.HasTasks()"}, "doc":"returns true if the hooks has tasks while executing"},
            {"name":"Execute", "interface":{"name":"THook", "attribute":"Execute" , "type":"Hook"}, "doc":"returns the executing tasks"}
        ]
    },
    {  
        "name":"TNodeHook",
        "implemented_by":["NodeHook"],
        "doc":"is a read only representation of the hooks associated to a node",
        "methods":[  
            {"name":"HasCreate",  "custom": {"returns":"bool", "impl":"r.h.Create.HasTasks()"}, "doc":"returns true if the hooks has tasks while creating"},
            {"name":"Create", "interface":{"name":"THook", "attribute":"Create" , "type":"Hook"}, "doc":"returns the creating tasks"}
        ]
    },
    {  
        "name":"THook",
        "implemented_by":["Hook"],
        "doc":"is a read only hooks ",
        "methods":[  
            {"name":"After", "interface_array":{"name":"TTaskRef", "attribute":"After", "type":"TaskRef" }, "doc":"returns the references of tasks to run after the hooked action"},
            {"name":"Before", "interface_array":{"name":"TTaskRef", "attribute":"Before", "type":"TaskRef" }, "doc":"returns the references of tasks to run before the hooked action"}
        ]
    }
 ]