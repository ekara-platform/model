package model

//*****************************************************************************
//
//     _         _           ____                           _           _
//    / \  _   _| |_ ___    / ___| ___ _ __   ___ _ __ __ _| |_ ___  __| |
//   / _ \| | | | __/ _ \  | |  _ / _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |
//  / ___ \ |_| | || (_) | | |_| |  __/ | | |  __/ | | (_| | ||  __/ (_| |
// /_/   \_\__,_|\__\___/   \____|\___|_| |_|\___|_|  \__,_|\__\___|\__,_|
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// ----------------------------------------------------
// Implementation(s) of TEnvironment
// ----------------------------------------------------

//TEnvironmentOnEnvironmentHolder is the struct containing the Environment in order to implement TEnvironment
type TEnvironmentOnEnvironmentHolder struct {
	h Environment
}

//CreateTEnvironmentForEnvironment returns an holder of Environment implementing TEnvironment
func CreateTEnvironmentForEnvironment(o Environment) TEnvironmentOnEnvironmentHolder {
	return TEnvironmentOnEnvironmentHolder{
		h: o,
	}
}

//Name returns the name of the environment
func (r TEnvironmentOnEnvironmentHolder) Name() string {
	return r.h.Name
}

//Qualifier returns the qualifier of the environment
func (r TEnvironmentOnEnvironmentHolder) Qualifier() string {
	return r.h.Qualifier
}

//Description returns the description of the environment
func (r TEnvironmentOnEnvironmentHolder) Description() string {
	return r.h.Description
}

//QualifiedName returns the qualified of the environment
func (r TEnvironmentOnEnvironmentHolder) QualifiedName() string {
	return r.h.Name + "_" + r.h.Qualifier
}

//Platform returns the platform used to deploy environment
func (r TEnvironmentOnEnvironmentHolder) Platform() TPlatform {
	return CreateTPlatformForPlatform(*r.h.ekara)
}

//HasVars returns true if the environment has defined vars
func (r TEnvironmentOnEnvironmentHolder) HasVars() bool {
	return len(r.h.Vars) > 0
}

//Vars returns the environement vars
func (r TEnvironmentOnEnvironmentHolder) Vars() map[string]interface{} {
	return r.h.Vars
}

//Orchestrator returns the orchestrator managing the environment nodes
func (r TEnvironmentOnEnvironmentHolder) Orchestrator() TOrchestrator {
	return CreateTOrchestratorForOrchestrator(r.h.Orchestrator)
}

//HasProviders returns true if the environment has providers
func (r TEnvironmentOnEnvironmentHolder) HasProviders() bool {
	return len(r.h.Providers) > 0
}

//Providers returns the environment providers
func (r TEnvironmentOnEnvironmentHolder) Providers() map[string]TProvider {
	result := make(map[string]TProvider)
	for k, val := range r.h.Providers {
		result[k] = CreateTProviderForProvider(val)
	}
	return result

}

//HasNodes returns true if the environment has nodes
func (r TEnvironmentOnEnvironmentHolder) HasNodes() bool {
	return len(r.h.NodeSets) > 0
}

//Nodes returns the environment providers
func (r TEnvironmentOnEnvironmentHolder) Nodes() map[string]TNodeSet {
	result := make(map[string]TNodeSet)
	for k, val := range r.h.NodeSets {
		result[k] = CreateTNodeSetForNodeSet(val)
	}
	return result

}

//HasStacks returns true if the environment has stacks
func (r TEnvironmentOnEnvironmentHolder) HasStacks() bool {
	return len(r.h.Stacks) > 0
}

//Stacks returns the environment stacks
func (r TEnvironmentOnEnvironmentHolder) Stacks() map[string]TStack {
	result := make(map[string]TStack)
	for k, val := range r.h.Stacks {
		result[k] = CreateTStackForStack(val)
	}
	return result

}

//HasTasks returns true if the environment has tasks
func (r TEnvironmentOnEnvironmentHolder) HasTasks() bool {
	return len(r.h.Tasks) > 0
}

//Tasks returns the environment tasks
func (r TEnvironmentOnEnvironmentHolder) Tasks() map[string]TTask {
	result := make(map[string]TTask)
	for k, val := range r.h.Tasks {
		result[k] = CreateTTaskForTask(*val)
	}
	return result

}

//HasHooks returns true if the environment has hooks
func (r TEnvironmentOnEnvironmentHolder) HasHooks() bool {
	return r.h.Hooks.HasTasks()
}

//Hooks returns the environment hooks
func (r TEnvironmentOnEnvironmentHolder) Hooks() TEnvironmentHooks {
	return CreateTEnvironmentHooksForEnvironmentHooks(r.h.Hooks)
}

//HasInitHooks returns true if the environment has hooks before creating
func (r TEnvironmentOnEnvironmentHolder) HasInitHooks() bool {
	return r.h.Hooks.Init.HasTasks()
}

//HasCreateHooks returns true if the environment has hooks while creating
func (r TEnvironmentOnEnvironmentHolder) HasCreateHooks() bool {
	return r.h.Hooks.Create.HasTasks()
}

//HasInstallHooks returns true if the environment has hooks while installing
func (r TEnvironmentOnEnvironmentHolder) HasInstallHooks() bool {
	return r.h.Hooks.Install.HasTasks()
}

//HasDeployHooks returns true if the environment has hooks while deploying
func (r TEnvironmentOnEnvironmentHolder) HasDeployHooks() bool {
	return r.h.Hooks.Deploy.HasTasks()
}

//HasDestroyHooks returns true if the environment has hooks while destroying
func (r TEnvironmentOnEnvironmentHolder) HasDestroyHooks() bool {
	return r.h.Hooks.Destroy.HasTasks()
}
