package model

//*****************************************************************************
//
//     _         _           ____                           _           _
//    / \  _   _| |_ ___    / ___| ___ _ __   ___ _ __ __ _| |_ ___  __| |
//   / _ \| | | | __/ _ \  | |  _ / _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |
//  / ___ \ |_| | || (_) | | |_| |  __/ | | |  __/ | | (_| | ||  __/ (_| |
// /_/   \_\__,_|\__\___/   \____|\___|_| |_|\___|_|  \__,_|\__\___|\__,_|
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// ----------------------------------------------------
// Implementation(s) of TStackHooks
// ----------------------------------------------------

//TStackHooksOnStackHookHolder is the struct containing the StackHook in order to implement TStackHooks
type TStackHooksOnStackHookHolder struct {
	h StackHook
}

//CreateTStackHooksForStackHook returns an holder of StackHook implementing TStackHooks
func CreateTStackHooksForStackHook(o StackHook) TStackHooksOnStackHookHolder {
	return TStackHooksOnStackHookHolder{
		h: o,
	}
}

//HasDeploy returns true if the hooks has tasks while deploying
func (r TStackHooksOnStackHookHolder) HasDeploy() bool {
	return r.h.Deploy.HasTasks()
}

//Deploy returns the deploying tasks
func (r TStackHooksOnStackHookHolder) Deploy() THook {
	return CreateTHookForHook(r.h.Deploy)
}
