package model

//*****************************************************************************
//
//     _         _           ____                           _           _
//    / \  _   _| |_ ___    / ___| ___ _ __   ___ _ __ __ _| |_ ___  __| |
//   / _ \| | | | __/ _ \  | |  _ / _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |
//  / ___ \ |_| | || (_) | | |_| |  __/ | | |  __/ | | (_| | ||  __/ (_| |
// /_/   \_\__,_|\__\___/   \____|\___|_| |_|\___|_|  \__,_|\__\___|\__,_|
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// ----------------------------------------------------
// Implementation(s) of TTask
// ----------------------------------------------------

//TTaskOnTaskHolder is the struct containing the Task in order to implement TTask
type TTaskOnTaskHolder struct {
	h Task
}

//CreateTTaskForTask returns an holder of Task implementing TTask
func CreateTTaskForTask(o Task) TTaskOnTaskHolder {
	return TTaskOnTaskHolder{
		h: o,
	}
}

//Name returns the name of the task
func (r TTaskOnTaskHolder) Name() string {
	return r.h.Name
}

//Playbook returns the playbook linked to the task
func (r TTaskOnTaskHolder) Playbook() string {
	return r.h.Playbook
}

//Parameters returns the task parameters
func (r TTaskOnTaskHolder) Parameters() map[string]interface{} {
	return r.h.Parameters
}

//EnvVars returns the task environment variables
func (r TTaskOnTaskHolder) EnvVars() map[string]string {
	return r.h.EnvVars
}

//HasHooks returns true if the task has hooks
func (r TTaskOnTaskHolder) HasHooks() bool {
	return r.h.Hooks.HasTasks()
}

//Hooks returns the task hooks
func (r TTaskOnTaskHolder) Hooks() TTaskHooks {
	return CreateTTaskHooksForTaskHook(r.h.Hooks)
}
