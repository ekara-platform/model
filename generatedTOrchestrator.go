package model

//*****************************************************************************
//
//     _         _           ____                           _           _
//    / \  _   _| |_ ___    / ___| ___ _ __   ___ _ __ __ _| |_ ___  __| |
//   / _ \| | | | __/ _ \  | |  _ / _ \ '_ \ / _ \ '__/ _` | __/ _ \/ _` |
//  / ___ \ |_| | || (_) | | |_| |  __/ | | |  __/ | | (_| | ||  __/ (_| |
// /_/   \_\__,_|\__\___/   \____|\___|_| |_|\___|_|  \__,_|\__\___|\__,_|
//
// This file is autogenerated by "go generate .". Do not modify.
//
//*****************************************************************************

// ----------------------------------------------------
// Implementation(s) of TOrchestrator
// ----------------------------------------------------

//TOrchestratorOnOrchestratorHolder is the struct containing the Orchestrator in order to implement TOrchestrator
type TOrchestratorOnOrchestratorHolder struct {
	h Orchestrator
}

//CreateTOrchestratorForOrchestrator returns an holder of Orchestrator implementing TOrchestrator
func CreateTOrchestratorForOrchestrator(o Orchestrator) TOrchestratorOnOrchestratorHolder {
	return TOrchestratorOnOrchestratorHolder{
		h: o,
	}
}

//Parameters returns the orchestrator parameters
func (r TOrchestratorOnOrchestratorHolder) Parameters() map[string]interface{} {
	return r.h.Parameters
}

//EnvVars returns the orchestrator environment variables
func (r TOrchestratorOnOrchestratorHolder) EnvVars() map[string]string {
	return r.h.EnvVars
}

//Component returns the orchestrator component
func (r TOrchestratorOnOrchestratorHolder) Component() (TComponent, error) {
	v, err := r.h.Component()
	return CreateTComponentForComponent(v), err
}
